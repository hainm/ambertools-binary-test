#!/usr/bin/env python
# Note: This program is for internal use (developers) and
# should be never included in release tar file.
# (It has our circleci private token)

# require: requests (python), wget

# How?
#  - get info without downloading
#        python download_circleci_AmberTools.py --info
#  - download
#        python download_circleci_AmberTools.py

# What does this script do? Will download latest succesful AmberTools build on circleci
#    https://circleci.com/gh/Amber-MD/ambertools-ci/481
#    (Note: If you are in Amber-MD organization on github, you can change settings)
# Why does this matter? Collaborators (e.g: phenix) can download, untar and just use the binary distribution (dev)

import os
import argparse
import requests
import json
import subprocess


def get_circle_info(url):
    # info: List[Dict]
    print('url', url)
    x = requests.get(url)
    json.loads(x.content.decode())
    info = json.loads(x.content.decode())
    return info


def download_non_conda_install_tarfiles(url_artifact_info,
        dry_run=False, exclude_conda=False):
    # require: wget
    info = get_circle_info(url_artifact_info)

    for path_dict in info:
        url = path_dict['url']
        if exclude_conda:
            if 'non-conda-install' in path_dict['pretty_path']:
                print('Downloading ', url)
                if not dry_run:
                    subprocess.check_output(['wget', url])
        else:
            print('Downloading ', url)
            if not dry_run:
                subprocess.check_output(['wget', url])

def get_latest_build_info(url_info):
    info_collection = get_circle_info(url_info)

    info = {}
    for info in info_collection:
        if info['status'] == 'success':
            break

    keys = [
        'username',
        'branch',
        'author_name',
        'committer_date',
        'has_artifacts',
        'build_url',
        'vcs_url',
        'status',
        'build_num',
        'all_commit_details',
    ]

    for k in keys:
        if k == 'all_commit_details':
            details = info.get(k)[0]
            print(details['body'])
        else:
            print(k, info.get(k))
    print("")


def main():
    parser = argparse.ArgumentParser(
        description='Download/get-info binary builds from circleci',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        '-r',
        '--repo',
        default='ambertools-ci',
        help="(default: %(default)s)")
    parser.add_argument(
        '-b', '--branch', default='nightly', help="(default: %(default)s)")
    parser.add_argument(
        '--build-num', default='latest', help="(default: %(default)s)")
    parser.add_argument(
        '--info',
        action='store_true',
        help='Only show information without downloading')
    parser.add_argument(
        '--exclude-conda',
        action='store_true',
        help='Exclude conda build')
    parser.add_argument('-d', '--dry-run', action='store_true', help='dry run')
    args = parser.parse_args()

    repo = args.repo
    branch = args.branch
    build_num = args.build_num

    url_info = "https://circleci.com/api/v1.1/project/github/Amber-MD/{repo}/tree/{branch}".format(
        repo=repo, branch=branch)
    # token was generated by visiting: https://circleci.com/account/api
    # (private env)
    token = os.getenv('AMBERTOOLS_TOKEN')
    base_dir = 'https://circleci.com/api/v1.1/project/github/Amber-MD/'
    my_branch = '{repo}/{build_num}/artifacts?circle-token={token}&branch={branch}&filter=successful'.format(
        token=token, repo=repo, branch=branch, build_num=build_num)
    url_artifact_info = base_dir + my_branch

    get_latest_build_info(url_info)
    if args.dry_run:
        print('Dry run')
    if not args.info:
        download_non_conda_install_tarfiles(url_artifact_info,
                dry_run=args.dry_run,
                exclude_conda=args.exclude_conda)
    else:
        print('skip downloading since --info is given')


if __name__ == '__main__':
    main()
